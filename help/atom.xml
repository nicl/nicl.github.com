<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>room271</title>
 <link href="http://room271.net/atom.xml" rel="self"/>
 <link href="http://room271.net/"/>
 <updated>2012-07-08T11:36:26+01:00</updated>
 <id>http://room271.net/</id>
 <author>
   <name>Nicolas Long</name>
   <email>nicolaslong@gmail.com</email>
 </author>

 
 <entry>
   <title>Managing Files with Emacs</title>
   <link href="http://room271.net//2012/07/05/emacs-dired.html"/>
   <updated>2012-07-05T00:00:00+01:00</updated>
   <id>http://room271.net/2012/07/05/emacs-dired</id>
   <content type="html">&lt;p&gt;See &lt;a href='http://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html#Dired'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C-x d : displays directory listing (opens dired)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;note, C-x-d is different, it displays the directory but without edit options (it is not dired)&lt;/p&gt;

&lt;h2 id='deleting'&gt;Deleting&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;d: flag for deletion&lt;/li&gt;

&lt;li&gt;u: remove flag&lt;/li&gt;

&lt;li&gt;x: delete files that are flagged&lt;/li&gt;

&lt;li&gt;d regexp RET: flag files for deletion by regexp&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='visiting_files'&gt;Visiting files&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;f: visit the file (replaces dired buffer)&lt;/li&gt;

&lt;li&gt;o: visit the file but in the other buffer (keep dired open)&lt;/li&gt;

&lt;li&gt;o: like o but keep cursor in dired buffer (this is most useful)&lt;/li&gt;

&lt;li&gt;v: view mode (read only, useful for quick glance, press &amp;#8216;q&amp;#8217; to then quit)&lt;/li&gt;

&lt;li&gt;^: view parent directory (like f on .. / shows dired for parent)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So use ^ and f to navigate between folders.&lt;/p&gt;

&lt;h2 id='marking_files'&gt;Marking files&lt;/h2&gt;

&lt;p&gt;You can mark files to operate on multiple files at the same time. It can also server to ease navigation.&lt;/p&gt;

&lt;p&gt;Marking files is the same as for Emacs in general (C-space).&lt;/p&gt;

&lt;h2 id='operating_on_files'&gt;Operating on files&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;C new: copy&lt;/li&gt;

&lt;li&gt;R new: rename&lt;/li&gt;

&lt;li&gt;M: change mode (permissions, same arguments as chmod)&lt;/li&gt;

&lt;li&gt;G: change group (chgrp)&lt;/li&gt;

&lt;li&gt;O: change owner (chown)&lt;/li&gt;

&lt;li&gt;B: byte compile (for emacs lisp files)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='file_comparison'&gt;File comparison&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;=&lt;/span&gt; : compare current file to mark&lt;/li&gt;

&lt;li&gt;M-= : compare current file to latest backup&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='make_a_new_file'&gt;Make a new file&lt;/h2&gt;

&lt;p&gt;Just press + in dired mode in the parent folder.&lt;/p&gt;

&lt;p&gt;Alternatively, create a file directly, and then create the directory before saving do:&lt;/p&gt;

&lt;p&gt;M-x make-directory RET RET&lt;/p&gt;

&lt;p&gt;Nice :)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Enumerable methods in Ruby</title>
   <link href="http://room271.net//2012/06/19/ruby-enumerable-methods.html"/>
   <updated>2012-06-19T00:00:00+01:00</updated>
   <id>http://room271.net/2012/06/19/ruby-enumerable-methods</id>
   <content type="html">&lt;p&gt;Ruby is a lightweight scripting language and as such it provides a variety of in-built mechanisms for enumerating through collections (arrays and hashes mostly).&lt;/p&gt;

&lt;p&gt;These methods can often replace the traditional &amp;#8216;for&amp;#8217; and &amp;#8216;while&amp;#8217; loops, which are error-prone because they require implementing an iterator of some kind.&lt;/p&gt;

&lt;p&gt;The methods to know are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;#each&lt;/li&gt;

&lt;li&gt;#map&lt;/li&gt;

&lt;li&gt;#select&lt;/li&gt;

&lt;li&gt;#inject&lt;/li&gt;

&lt;li&gt;#reject&lt;/li&gt;

&lt;li&gt;#detect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some methods do not necessarily require a block (for example, inject).&lt;/p&gt;

&lt;p&gt;Most of the methods are callable by different names (this is Ruby after all!).&lt;/p&gt;

&lt;p&gt;All methods can be used with either the one-line or do..end forms.&lt;/p&gt;

&lt;p&gt;All methods do not operate on the collection directly, but return a new collection. Sometimes, versions which modify are available (usually suffixed with &amp;#8217;!&amp;#8217;).&lt;/p&gt;

&lt;h2 id='each'&gt;#each&lt;/h2&gt;

&lt;p&gt;Allows iterating through a collection and operating (via a block) on each item:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;array&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
  &lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='map'&gt;#map&lt;/h2&gt;

&lt;p&gt;Operate on each item using a block and generate an array from the results.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;array&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='kp'&gt;new&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='c1'&gt;# new is [&amp;#39;1!&amp;#39;, &amp;#39;2!&amp;#39;, &amp;#39;3!&amp;#39;]. array is unchanged.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The collect() method is equivalent (and is perhaps more obviously named).&lt;/p&gt;

&lt;h2 id='select'&gt;#select&lt;/h2&gt;

&lt;p&gt;Like map but rather than modifying an array, filters it to return a new array of values for which your expression returns true.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;array&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='kp'&gt;new&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;select&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='c1'&gt;# new is [2, 3]. array is unchanged.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='inject'&gt;#inject&lt;/h2&gt;

&lt;p&gt;Combine all elements using a binary operation.&lt;/p&gt;

&lt;p&gt;I.e. you are injecting each value into some calculation. Alternatively put, you are reducing the collection to a single value.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;array&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='n'&gt;reduced&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;inject&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:+&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='c1'&gt;#reduced is 6 (the sum of all the values)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There are many options/rules for this method (about accumulators, etc.). See the docs &lt;a href='http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-inject'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also known accessible as &amp;#8216;reduce&amp;#8217;.&lt;/p&gt;

&lt;h2 id='reject'&gt;#reject&lt;/h2&gt;

&lt;p&gt;Returns an array of all elements for which the block returns false.&lt;/p&gt;

&lt;p&gt;Opposite of map/collect.&lt;/p&gt;

&lt;h2 id='detect'&gt;#detect&lt;/h2&gt;

&lt;p&gt;Iterates over elements and returns the first for which the block returns true.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;100&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;detect&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;%&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;%&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;   &lt;span class='c1'&gt;#=&amp;gt; 35&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Javascript Objects And Protype Based Programming</title>
   <link href="http://room271.net//2012/06/16/javascript-objects-and-protype-based-programming.html"/>
   <updated>2012-06-16T00:00:00+01:00</updated>
   <id>http://room271.net/2012/06/16/javascript-objects-and-protype-based-programming</id>
   <content type="html">&lt;h1 id='article_on_object_and_protypebased_programming_in_js_use_dcs_book_as_referencestarting_point'&gt;article on object and protype-based programming in JS (use DCs book as reference/starting point)&lt;/h1&gt;</content>
 </entry>
 
 <entry>
   <title>goodbyes</title>
   <link href="http://room271.net//2012/05/30/goodbyes.html"/>
   <updated>2012-05-30T00:00:00+01:00</updated>
   <id>http://room271.net/2012/05/30/goodbyes</id>
   <content type="html">&lt;p&gt;To those who are leaving Strasbourg for the summer or more permanently here is Paul&amp;#8217;s goodbye to the Galatians, which I hope you will take to heart:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Good-bye, friends. Love mixed with faith be yours from God the Father and from the Master, Jesus Christ.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pure grace and nothing but grace be with all who love our Master, Jesus Christ.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Amen(!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(We&amp;#8217;re going to miss you!)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Drupal - why the talent problem is not going to go away</title>
   <link href="http://room271.net//2012/05/24/developers-and-drupal.html"/>
   <updated>2012-05-24T00:00:00+01:00</updated>
   <id>http://room271.net/2012/05/24/developers-and-drupal</id>
   <content type="html">&lt;p&gt;&lt;em&gt;UPDATE 27/05/2012: I wasn&amp;#8217;t 100% about this article when I wrote it. I was concerned that I was extrapolating (unfairly) a broader picture from my own (particular) experiences. After a great discussion with some clever and kind people on IRC (in drupal-contribute) I still think most of what is said below is an accurate reflection of my opinion and has some validity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But there are(!) seriously talented Drupalshops and people at the top, so if you like Drupal and learning, make an effort to work for one of those. Some of the feedback I received in IRC was from a young Drupaler whose experience was quite different from my own - they had completed an internship at a top Drupalshop and were just about to start working full-time on Drupal. During their internship they felt they&amp;#8217;d learnt a lot (and looking at their Drupal contributions, I&amp;#8217;m inclined to agree).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And as someone else said, if you&amp;#8217;re a true geek, don&amp;#8217;t box yourself in; always investigate technologies on the side, if for nothing else than that it will help you become a better Drupaler and Drupal a better product!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A year ago, when I was just starting out as a developer (PHP being my first proper programming language) I was a gungho Drupalista. Drupal had enabled me to produce sophisticated sites even before I knew how to program. You could even say that without Drupal I would never have become a programmer. A year later, I still think Drupal is great - particularly the community - but I begin to find myself with doubts over whether I want to stick with Drupal for my career.&lt;/p&gt;

&lt;p&gt;In this blog I want to explore the reasons for this change in the hope that an analysis can provide some pointers for the community as a whole. I&amp;#8217;m exactly the kind of young developer I think Drupal needs to target and if young people like me decide not to pursue or persist with Drupal, then Drupal is in trouble. It may be that the problem is intractable, but I hope not.&lt;/p&gt;

&lt;p&gt;Essentially, I am going to suggest that Drupal will struggle to fill the talent gap because talented developers rationally avoid working on Drupal. This is because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Drupal slows the pace of personal development for a programmer&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some positive changes for Drupal 8 which may address some of the concerns I express below. But in general, I don&amp;#8217;t think these will be enough.&lt;/p&gt;

&lt;p&gt;In order to explain my thinking, I want to introduce you to the &amp;#8216;Young Developer&amp;#8217; (a stylised version of me 1 year ago) and her early development.&lt;/p&gt;

&lt;h2 id='the_young_developer'&gt;The Young Developer&lt;/h2&gt;

&lt;p&gt;The young developer (note by &amp;#8216;young&amp;#8217; is meant simply inexperienced) I am depicting arrives fresh on the scene with the following, highly laudable, goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to become a &amp;#8216;programmer&amp;#8217; - that is to hold a strong understanding of computer science beyond simply being able to express herself in a single language or paradigm, and to be able to produce sophisticated programs which are well-written and easy to maintain and develop;&lt;/li&gt;

&lt;li&gt;to constantly learn;&lt;/li&gt;

&lt;li&gt;to be at the cutting edge - to have the chance to innovate, work on more complex and interesting problems - both for personal satisfaction, and to provide for greater freedom in career choices later down the line;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is me. I try to do my best at achieving these goals.&lt;/p&gt;

&lt;h2 id='growing_pains'&gt;Growing pains&lt;/h2&gt;

&lt;p&gt;Like me, the young developer will go through some changes in their early career. For me personally over the last year this has meant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have become a better PHP programmer, learning the basics of OOP and other newer PHP features such as namespaces, and generally having written and been exposed to more code than at year&amp;#8217;s start;&lt;/li&gt;

&lt;li&gt;I have become aware of a wider range of technologies and approaches, from Symfony and other leading PHP frameworks, to other languages and paradigms such as Ruby, Clojure (and associated functional programming), and the growing importance of Javascript even for the backend;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These changes have prompted a new perspective. In short, the world is bigger than before and Drupal has become correspondingly smaller, less impressive, and less exciting. All of this is, to some extent, inevitable for the younger (by which is meant less experienced) developer. But there are a number of reasons why Drupal might particularly begin to struggle to keep talented individuals.&lt;/p&gt;

&lt;h2 id='specific_concerns'&gt;Specific concerns&lt;/h2&gt;

&lt;h3 id='drupal_is_not_sexy'&gt;Drupal is not sexy&lt;/h3&gt;

&lt;p&gt;Drupal is not really on the cutting edge. We do not follow the sophisticated decoupling of Symfony, nor do we take advantage of language features such as namespaces that are standard elsewhere. PHP itself is perhaps not the most elegant or expressive language, although as a beginner I certainly appreciated its easy availability and wealth of learning resources.&lt;/p&gt;

&lt;p&gt;In short, Drupal has become a bit of a lumbering beast. There are signs of limbering up for Drupal 8, but that is 2 or more years away, and two years is a long time in web-development, not to mention in a young-person&amp;#8217;s career.&lt;/p&gt;

&lt;h3 id='drupal_makes_things_too_easy'&gt;Drupal makes things too easy&lt;/h3&gt;

&lt;p&gt;Secondly, Drupal does all the hard work for you. Ironically, this is a great strength of Drupal; the company I work for loves the fact that we can churn out websites with logins, and user-generated content, with relatively little custom code required. But for us developers, half of our expertise is in knowing how to configure various modules (such as Views) and being aware of which modules to use in the first place. Unless you are working at the cutting edge of Drupal development (for one of the big companies - you know who they are) as a Drupal developer there isn&amp;#8217;t much to the coding. Drupal, like Wordpress, is often a case of rinse, lather, repeat.&lt;/p&gt;

&lt;h3 id='better_alternatives_to_php_are_now_widely_available'&gt;Better alternatives to PHP are now widely available&lt;/h3&gt;

&lt;p&gt;Another, more personal, reason is that I want to learn more than just PHP. Ruby, Python, Clojure and other languages lurk on the horizon and tempt me from afar. One of the liberating things about being a web-developer is that you have a lot of freedom over the technology stack you employ - you don&amp;#8217;t have to rely on desktop clients supporting your language of choice; everything is on the server (except Javascript of course). To be tied to Drupal is to be tied to PHP.&lt;/p&gt;

&lt;h2 id='is_this_just_me'&gt;Is this just me?&lt;/h2&gt;

&lt;p&gt;I don&amp;#8217;t know is the honest answer. Some of the above can, I&amp;#8217;m sure, be put down to individual preference. But much is, I suspect, generalisable: good programmers want to be constantly learning and evolving, and want to work on complex problems. They also want to experience new paradigms and programming languages.&lt;/p&gt;

&lt;p&gt;Perhaps, in fact, you are reading this article and want to shout out &amp;#8216;Drupal isn&amp;#8217;t like that!&amp;#8217; You don&amp;#8217;t recognise the picture I&amp;#8217;ve painted. That&amp;#8217;s great. I&amp;#8217;m speaking from personal experience at a middle-of-the-road Drupal shop and I know that many people are having fulfilling careers working on complex problems in Drupal. And if you think that there are always opportunities to learn and develop with Drupal and that it&amp;#8217;s a matter of taking them I&amp;#8217;d mostly agree. But I don&amp;#8217;t think my picture is just a crude charicature (although feel free to try and change my opinion). A lot of Drupal work &lt;em&gt;is&lt;/em&gt; boilerplate and we can&amp;#8217;t get away from that fact. Most modules involve no architecture at all - you just implement hooks x, y, and z.&lt;/p&gt;

&lt;h2 id='anyway_enough_of_the_moaning_what_are_you_suggesting'&gt;Anyway, enough of the moaning. What are you suggesting?!&lt;/h2&gt;

&lt;p&gt;What can we, in the Drupal community do, to tackle the above? Well, to start we should be as radical as possible with Drupal 8. In my mind this means going for WSCCI and CMI full-fat versions, no holding back, and leveraging Symfony and other frameworks where possible to replace some of the cruft.*&lt;/p&gt;

&lt;p&gt;But some of the problems are not going to go away soon, because the &amp;#8216;athletic developer&amp;#8217; I describe is not the only or even the core Drupal stakeholder. There is an inherent tension between business interests of cheap and rapid mass-development and backward-compatibility, and the uber-advanced glowing Drupal that the keen developer would like to see and work on.&lt;/p&gt;

&lt;h2 id='a_personal_conclusion'&gt;A personal conclusion&lt;/h2&gt;

&lt;p&gt;On a personal level, one obvious solution is to try and get into a top Drupal shop where one can work on taking Drupal forward and just avoid the lower end of the market altogether. Top firms like Acquia have started graduate programs (&amp;#8216;Acquia-U&amp;#8217;) which provide a way-in straight to the technical-top of Drupal development. But even then, it is inescapable that a large part of Drupal development will be copy-and-paste (which is mostly what implementing hooks involves) and configuration. And transferable skills gained (understanding architecture, learning new languages, performance, etc.) will likely be less than through working on custom sites or with a framework.&lt;/p&gt;

&lt;p&gt;Another possibility is to try and join a shop which uses Drupal &lt;em&gt;along with&lt;/em&gt; other technologies. There are plenty of shops like this; diversification is obvious, particularly in regard to the various Javascript frameworks now available). I would encourage young Drupal developers to consider this route - leverage your Drupal domain knowledge, if you have some, while at the same time exploring other technologies.&lt;/p&gt;

&lt;p&gt;Because, the danger is that working on Drupal alone could limit your personal development. And this is not surprising. Is it really wrong or harsh to suggest that the average ability of a Drupal developer is substantially below that of a Symfony or Rails developer? I don&amp;#8217;t think it is. (Please don&amp;#8217;t be offended if you work on Drupal - so do I and I include myself in this). After all, one of Dries&amp;#8217; stated aims with Drupal is precisely to cut out the developer. And this is a good thing - to empower all sorts of people and organisations to make websites when before they could not. The thing is, it just might not be a good thing for me personally.&lt;/p&gt;

&lt;p&gt;I love Drupal and particularly her vibrant community. But I find myself increasingly doubtful of whether Drupal is a good place to be for the long-term.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* When I first started writing the article this wasn&amp;#8217;t at all certain. The great news is that the plans for Drupal 8 turned out just as radical as I had hoped :) Garfield and co are literally re-writing Drupal from the ground up and leveraging as many Symfony and other components as they can get away with along the way.&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll and blog redesign</title>
   <link href="http://room271.net//2012/05/23/jekyll.html"/>
   <updated>2012-05-23T00:00:00+01:00</updated>
   <id>http://room271.net/2012/05/23/jekyll</id>
   <content type="html">&lt;p&gt;Applying for IGN&amp;#8217;s Code Foo had the added benefit of providing a redesign for my blog (one of the tasks was to design a liquid layout). As well as making a simple, but elegant, responsive design, I wanted to experiment with a new blogging platform. As much as I love Drupal it is, to be honest, a bit overkill for a simple blog. And the additional functionality does not justify the difficulty theming, configuring and updating the damn thing. What&amp;#8217;s more, writing and editing in a WYSIWYG is and has always been a horrible experience.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href='http://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jekyll is, to quote from the github repository:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8230;a blog-aware, static site generator in Ruby&amp;#8230;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s made by Tom Preston-Warner - one of the brains behind github - and implemented in Ruby.&lt;/p&gt;

&lt;p&gt;Jekyll is great because it is low-maintenance and supports an elegant workflow of writing locally -&amp;gt; git -&amp;gt; server. This means I can use whatever text tool I like (Emacs in this instance) to write my blog posts. And because Jekyll spits out static html files security is not an issue (no more updating) and performance is better than a dynamic equivalent, whether that be php, ruby, python, javascript, or some other language.&lt;/p&gt;

&lt;h2 id='how_does_it_work'&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;Jekyll works by taking your content and converting it into a set of static html, css, and javascript files, together which form a website. What transforms Jekyll from a simple copy-write process are three dynamic elements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;YAML front-matter:&lt;/li&gt;

&lt;li&gt;Liquid templating engine&lt;/li&gt;

&lt;li&gt;Markdown/Textile support&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If these are unfamiliar to you (as they were to me), a brief overview of each is provided below.&lt;/p&gt;

&lt;h3 id='yaml_frontmatter'&gt;YAML front-matter&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;- literally, information (matter) at the top (front) of a file, written in YAML (a simple data serialisation format, like JSON).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Used to provide post meta-data such as: categories/tags; which layout to apply; permalinks; and whether the post is published or not. YAML front-matter can also set up variables to use in the post/liquid templates, such as a page title.&lt;/p&gt;

&lt;p&gt;YAML front-matter must be placed at the top (front) of a file and takes the form of a set of key-value pairs boxed by triple-dashes. The front-matter for blog posts on this site looks like the following:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;title&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;my title&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;layout&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;post&lt;/span&gt;
&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='liquid_templating_engine'&gt;Liquid templating engine&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;- a templating engine, like SMARTY or TWIG in PHP, which provides a simple yet secure and expressive (enough) way to output your data. In short, templating languages provide easy printing, and simple logic (if/else and some form of looping statement as a minimum). This makes them simpler to use, and safer as well. By default, Jekyll makes the following variables available for each post: https://github.com/mojombo/jekyll/wiki/template-data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Liquid provides a variety of operators, such as the standard if/else, variable assignment, a for loop, and more. You can also extend Liquid to add you own logical tags.&lt;/p&gt;

&lt;p&gt;The temptation with templating languages is to keep making them bigger and bigger (this is, after all, how PHP started). I hope Liquid stays small, simple, and safe.&lt;/p&gt;

&lt;p&gt;To find out about how to use Liquid see you can read their docs &lt;a href='https://github.com/shopify/liquid/wiki/liquid-for-designers'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='markdown_and_textile_support'&gt;Markdown and Textile support&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;-in-built support for two well-known text-to-html converters.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;HTML and XHTML have a horrible syntax and are a pain to write. WYSIWYG editors are nearly all useless in my opinion. So in-built support for the two best-known text-to-html converters is a welcome feature. Both formats have a minimal syntax which is easy to learn, and are easily readable. My personal preference is Markdown at the moment, but either is great!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>IGN Code Foo!</title>
   <link href="http://room271.net//2012/05/19/ign-code-foo.html"/>
   <updated>2012-05-19T00:00:00+01:00</updated>
   <id>http://room271.net/2012/05/19/ign-code-foo</id>
   <content type="html">&lt;p&gt;I found out today that I have been accepted for IGN&amp;#8217;s Code Foo 2012! This is going to be awesome!&lt;/p&gt;

&lt;p&gt;Code Foo is a summer internship scheme run by IGN. To quote from their website:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Code-Foo is a six-week program where you&amp;#8217;ll get paid to learn cutting-edge tech and have the opportunity to work on real IGN engineering projects. While you&amp;#8217;re here you&amp;#8217;ll be trained by today&amp;#8217;s industry leaders in a conference-style setting. Next, you&amp;#8217;ll have time dedicated to work in small teams on real projects.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The sad news is that I have to leave Strasbourg and all my friends :( for at least a little while. But the chance of working and learning at IGN was too good to pass up!&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll be blogging on my Code Foo experiences regularly once I get to San Francisco. In the meantime, for anyone interested, you can read up on Code Foo &lt;a href='http://code.ign.com/foo'&gt;here&lt;/a&gt;. And if you&amp;#8217;re interested in my application, check out &lt;a href='http://github.com/nicl/ign'&gt;my github repo&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>PHP with style</title>
   <link href="http://room271.net//2012/02/27/php-style.html"/>
   <updated>2012-02-27T00:00:00+00:00</updated>
   <id>http://room271.net/2012/02/27/php-style</id>
   <content type="html">&lt;h2 id='basics'&gt;Basics&lt;/h2&gt;

&lt;p&gt;Code can be specification correct but still suck. For example, whitespace is largely optional in most programming languages (Python being a notable exception), but ignoring whitespace can result in code which is evidently bad:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;$var=$test?$a:$b;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Other &amp;#8216;layout&amp;#8217; concerns are indenting and the use of line-breaks to increase legibility. The important thing is to be consistent. You should probably adopt the coding standards of a well-known PHP project, either a framework like Symfony 2, or a CMS like Drupal.&lt;/p&gt;

&lt;h2 id='the_importance_of_subsetting'&gt;The importance of Subsetting&lt;/h2&gt;

&lt;p&gt;A fuller understanding of programming style extends beyond the placement of characters; good style requires an awareness of which language features to use and which to avoid. Some language features are more error-prone than others, and if an alternative exists which is less error-prone we are better off using that instead. This practice, of subsetting a language, is advocated strongly by, among others, Douglas Crockford (well-known in the Javascript world).&lt;/p&gt;

&lt;h2 id='reallife_example'&gt;Real-life example&lt;/h2&gt;

&lt;p&gt;What kinds of things are error-prone or &amp;#8216;dangerous&amp;#8217;? Consider the following example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;if ($x = CONSTANT) { ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This code executes a code block if CONSTANT is true, and assigns the value of CONSTANT to the variable x.&lt;/p&gt;

&lt;p&gt;But the code could just as easily have been intended to be:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;if ($x == CONSTANT) { ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now I am executing the code block if x and CONSTANT are equal. The behaviour has changed completely!&lt;/p&gt;

&lt;p&gt;People omit the second &amp;#8217;=&amp;#8217; by accident all the time. By adopting the rule of avoiding the first-case style (assignment within conditional statements) you remove a source of ambiguity and errors in your code. Now, if you or someone else, when reading your code later, sees the first case, they know it is an error and can correct it.&lt;/p&gt;

&lt;p&gt;Say we had intended to write the second form, there are still a few more problems with the code above. In PHP &amp;#8216;==&amp;#8217; itself can be considered &amp;#8216;dangerous&amp;#8217; because it compares values after coercing types according to rules which are &lt;a href='http://www.php.net/manual/en/types.comparisons.php'&gt;fantastically complicated&lt;/a&gt; and unintuitive. Instead, we should use:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;if ($x === CONSTANT) { ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(We might have to do some type conversion beforehand now, but the code can be easily read and understood.)&lt;/p&gt;

&lt;p&gt;One last thing, why not place the constant on the left-hand-side? That way, if we do forget some of the &amp;#8217;=&amp;#8217;s in our boolean expression, we&amp;#8217;ll immediately get a fatal error indicating our mistake. Our end result becomes:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;if (CONSTANT === $x) { ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='some_general_rules'&gt;Some general rules&lt;/h2&gt;

&lt;p&gt;Many of the features identified below as &amp;#8216;dangerous&amp;#8217; - meaning to be avoided - mirror examples given by Douglas Crockford for the Javascript language. And again, to reiterate, the point isn&amp;#8217;t that these features aren&amp;#8217;t useful, but that they are &lt;em&gt;always&lt;/em&gt; error-prone, and we can achieve the same purposes through other (safer) means. (Note that, unless otherwise stated, the points below indicate features which should be &lt;em&gt;avoided&lt;/em&gt;.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;++ and - -&lt;/li&gt;

&lt;li&gt;fall-throughs in switch statements&lt;/li&gt;

&lt;li&gt;\=\= and !\=&lt;/li&gt;

&lt;li&gt;assignment (=) within if and other expressions&lt;/li&gt;

&lt;li&gt;eval (and its cousins)&lt;/li&gt;

&lt;li&gt;globals (globals are evil!)&lt;/li&gt;

&lt;li&gt;the ternary operator in general, and particular avoid nesting ternary operators(!)&lt;/li&gt;

&lt;li&gt;massive blocks of html&lt;/li&gt;

&lt;li&gt;massive blocks of sql queries&lt;/li&gt;

&lt;li&gt;falsy values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the above make code harder to read, and errors harder to spot.&lt;/p&gt;

&lt;p&gt;And some things you &lt;em&gt;should&lt;/em&gt; do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;do&lt;/em&gt; follow the maxim of one statement per line max&lt;/li&gt;

&lt;li&gt;&lt;em&gt;do&lt;/em&gt; always use blocks in structured statements, even where optional&lt;/li&gt;

&lt;li&gt;&lt;em&gt;do&lt;/em&gt; differentiate between function invocation and control structures with whitespace, e.g. placing spaces between if and opening parens &amp;#8216;(&amp;#8217;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Code smells</title>
   <link href="http://room271.net//2011/09/11/code-stinks.html"/>
   <updated>2011-09-11T00:00:00+01:00</updated>
   <id>http://room271.net/2011/09/11/code-stinks</id>
   <content type="html">&lt;p&gt;Code smells are indicators of bad coding practice and possible problems down the line. By learning how to identify these stinks we can write cleaner code which is easier to read, easier to maintain, and which is less prone to unexpected behaviour.&lt;/p&gt;

&lt;p&gt;The more I learn about programming, the simpler my programs get. Not necessarily in terms of functionality, but definitely in terms of how I use and write code. This philosophy, of filtering out complexity and ambiguity, was presented with charateristic force by Palantir&amp;#8217;s Larry Garfield in a &lt;a href='http://london2011.drupal.org/conference/sessions/code-stinks'&gt;brilliant talk&lt;/a&gt; at Drupalcon London entitled &amp;#8216;This code stinks&amp;#8217; (links to the Drupalcon London site, with the session video and pdf). In his talk Larry outlined some simple rules/guidelines that, if adhered to, can lead to better code*. For my own memory/understanding, I&amp;#8217;m re-stating these &amp;#8216;code smells&amp;#8217; below. I hope they are useful, particularly for people like me who came to programming in a somewhat roundabout manner and do not have the benefit of a full on computer science course (where one would hope they teach this sort of thing**).&lt;/p&gt;

&lt;p&gt;Without further ado, the (as Larry calls them) 7 stinky smells&amp;#8230;&lt;/p&gt;

&lt;h2 id='1_and'&gt;#1 And&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; do X and Y (&amp;#8230;and Z &amp;#8230; etc.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Avoid code that does multiple things. Keep functions atomic. Avoid so-called &amp;#8216;God objects&amp;#8217;, which;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;do more than one thing&lt;/li&gt;

&lt;li&gt;know too much&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead, adopt a &amp;#8216;divide and conquer&amp;#8217; strategy, where each piece of code block achieves a clear and specific task.&lt;/p&gt;

&lt;h2 id='2_or'&gt;#2 Or&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; do X or sometimes Y&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For an example of this anti-pattern see: D7&amp;#8217;s registry_check_code() function. Or see the hook_block() function in D6 (thankfully now replaced by separate info/save/view/configure functions in D7).&lt;/p&gt;

&lt;h2 id='3_if'&gt;#3 If&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; excessive branching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Overly complex code leads to overly complex bugs. Excessive branching makes code hard to follow and outcomes hard to predict. Note, the level of branching is also called &amp;#8216;cyclomatic complexity&amp;#8217; in posh terms.&lt;/p&gt;

&lt;p&gt;As a general rule of thumb: avoid more than 3 levels of indentation in your code.&lt;/p&gt;

&lt;h2 id='4_lack_of_unit_testing'&gt;#4 (Lack of) Unit testing&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; lack of true unit testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think this one is a particular pet-hate of Larry&amp;#8217;s. A unit is the &amp;#8216;smallest possible part of an application&amp;#8217; but most testing tends to be &amp;#8216;system testing&amp;#8217; - testing a large block of functionality together. Particularly with complicated systems like Drupal, system testing doesn&amp;#8217;t actually tell you that your code works as intended (at least, not for every case). Larry also outlines some strategies to make code more unit testable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;avoid globals (as much as possible, you should be doing this anyway)&lt;/li&gt;

&lt;li&gt;avoid&lt;/li&gt;

&lt;li&gt;do use dependency injection - object / functions should be given what they need (as parameters), they shouldn&amp;#8217;t grab it for themselves&lt;/li&gt;

&lt;li&gt;minimize singletons - this is not an anti-pattern but should be generally avoided.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='5_lack_of_documentation'&gt;#5 (Lack of) documentation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; document everything&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can&amp;#8217;t teach what you don&amp;#8217;t actually know. It is especially important to comment code if you are embarrassed about it. (Rather than pretending it has nothing to do with you!) What to document? Everything. Every single&amp;#8230;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;function (including methods)&lt;/li&gt;

&lt;li&gt;class&lt;/li&gt;

&lt;li&gt;object property&lt;/li&gt;

&lt;li&gt;constant&lt;/li&gt;

&lt;li&gt;parameter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No exceptions.&lt;/p&gt;

&lt;h2 id='6_inappropriate_intimacy'&gt;#6 Inappropriate intimacy&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; when one piece of code knows too much about another&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is often called &amp;#8216;tight coupling&amp;#8217; and the result is that you can&amp;#8217;t change one piece of code without also having to change another (because the two are tightly coupled). This makes refactoring much more difficult. Unfortunately in Drupal there is a lot of this going on - all the large arrays we use (think Form API, Render API, Node API etc.) are inevitably tightly coupled because they do not allow the benefits of OOP (thinking of polymorphism here). One solution to avoid tight coupling is to utilise interfaces.&lt;/p&gt;

&lt;h2 id='7_impurity'&gt;#7 Impurity&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; keep functions &amp;#8216;pure&amp;#8217;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pure functions always&amp;#8230;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;given the same obvious input, give the same output&lt;/li&gt;

&lt;li&gt;have no side effects or I/O.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, a pure function called multiple times (with the same parameters) will always yield the same result. To help ensure &amp;#8216;pure&amp;#8217; code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;avoid globals&lt;/li&gt;

&lt;li&gt;avoid side effects&lt;/li&gt;

&lt;li&gt;avoid functions which cannot be repeated (without changing).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are obviously some exceptions to this requirement. For example, code which interacts with a database will not be &amp;#8216;pure&amp;#8217;. The suggestion here is that: a function/piece of code can be impure if the goal of the function is a side effect. In these cases, the policy is to keep pure and impure separate so as to yield the benefits of &amp;#8216;pure&amp;#8217; code as much as possible.&lt;/p&gt;

&lt;h2 id='durian_to_strawberries_good_smells'&gt;Durian to Strawberries (good smells)&lt;/h2&gt;

&lt;p&gt;Lastly, it&amp;#8217;s not all doom and gloom. If the above is Durian, than here we have some Strawberries; there are some more positive things we can look for and encourage in our code. Here are some &amp;#8216;good smells&amp;#8217; (code which is&amp;#8230;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;single-purpose&lt;/li&gt;

&lt;li&gt;self-contained&lt;/li&gt;

&lt;li&gt;predictable&lt;/li&gt;

&lt;li&gt;repeatable&lt;/li&gt;

&lt;li&gt;unit testable&lt;/li&gt;

&lt;li&gt;documented&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;* Many have attempted to define what good/better code actually is. For example, I recently came across this useful (and fairly comprehensive) definition - &lt;a href='http://pragprog.com/magazines/2011-08/how-virtuous-is-your-code'&gt;&amp;#8216;How virtuous is your code&amp;#8217;&lt;/a&gt;. For the purposes of this article I am mainly just thinking in terms of code which is easier to read / maintain and that displays more predictable behaviour / generates fewer errors.&lt;/p&gt;

&lt;p&gt;** Clearly this is not always the case! There is, as any programmer will know, a lot of bad code out there. For some educational examples, I recommend this blog: &lt;a href='http://csiphp.com/blog/'&gt;CSI:PHP&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 
</feed>
